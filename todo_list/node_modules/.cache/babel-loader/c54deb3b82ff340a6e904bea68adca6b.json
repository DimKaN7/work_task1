{"ast":null,"code":"var _jsxFileName = \"/Users/DimKa_N7/Documents/work/task1/todo_list/src/components/Menu.js\";\nimport React from 'react';\nimport '../css/Menu.css';\nimport PopUp from './PopUp';\nimport Task from './Task';\nconst statuses = {\n  new: 'Новый',\n  inProgress: 'В работе',\n  done: 'Завершено'\n};\nconst priorities = {\n  low: 'Низкий',\n  avg: 'Средний',\n  high: 'Высокий'\n};\n\nclass Menu extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      tasks: [{\n        id: 0,\n        desc: 'task1',\n        status: statuses.new,\n        priority: priorities.low,\n        endDate: '1.1.2019',\n        factEndDate: '-'\n      }, {\n        id: 1,\n        desc: 'task2',\n        status: statuses.inProgress,\n        priority: priorities.low,\n        endDate: '1.1.2019',\n        factEndDate: '-'\n      }, {\n        id: 2,\n        desc: 'task3',\n        status: statuses.done,\n        priority: priorities.low,\n        endDate: '1.1.2019',\n        factEndDate: '1.1.2019'\n      }],\n      popupMenuSeen: false,\n      editingTask: {}\n    };\n    this.togglePopupMenu = this.togglePopupMenu.bind(this);\n    this.addTask = this.addTask.bind(this);\n    this.editTask = this.editTask.bind(this);\n    this.getPopupMenu = this.getPopupMenu.bind(this);\n    this.deleteTask = this.deleteTask.bind(this); // this.onLabelStatusClick = this.onLabelStatusClick.bind(this);\n  }\n\n  togglePopupMenu(editingTask) {\n    this.setState({\n      editingTask: editingTask\n    });\n    this.setState({\n      popupMenuSeen: !this.state.popupMenuSeen\n    });\n  }\n\n  addTask(task) {\n    let {\n      tasks\n    } = this.state;\n    task.id = tasks.length !== 0 ? tasks.length : 0;\n    task.factEndDate = '-';\n    tasks.push(task);\n    this.setState({\n      tasks: tasks\n    });\n  }\n\n  editTask(task) {\n    let {\n      tasks\n    } = this.state;\n    tasks[task.id] = task;\n    this.setState({\n      tasks: tasks\n    });\n  }\n\n  deleteTask(task) {\n    let {\n      tasks\n    } = this.state;\n    const index = tasks.indexOf(task);\n    tasks.forEach(task => {\n      if (task.id > index) {\n        task.id = task.id - 1;\n      }\n    });\n    tasks.splice(index, 1);\n    this.setState(tasks);\n  }\n\n  getPopupMenu() {\n    let {\n      editingTask\n    } = this.state;\n\n    if (editingTask == null) {\n      return React.createElement(PopUp, {\n        toggle: this.togglePopupMenu,\n        task: null,\n        addTask: this.addTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(PopUp, {\n        toggle: this.togglePopupMenu,\n        task: editingTask,\n        editTask: this.editTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      });\n    }\n  } // onLabelStatusClick(event) {\n  //     let {tasks} = this.state;\n  //     let newTasks = tasks.filter(task => task.status == statuses.new);\n  //     let inProgressTasks = tasks.filter(task => task.status == statuses.inProgress);\n  //     let doneTasks = tasks.filter(task => task.status == statuses.done);\n  //     switch(event.target.value) {\n  //         case statuses.new:\n  //             break;\n  //     }\n  // }\n\n\n  render() {\n    const {\n      tasks\n    } = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"buttonAddTask\",\n      onClick: () => this.togglePopupMenu(null),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443\"), this.state.popupMenuSeen ? this.getPopupMenu() : null, React.createElement(\"input\", {\n      id: \"inputSerch\",\n      type: \"text\",\n      placeholder: \"\\u041F\\u043E\\u0438\\u0441\\u043A\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      className: \"menuLabels\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"\\u0412\\u0441\\u0435\\u0433\\u043E - \", tasks.length), React.createElement(\"label\", {\n      className: \"menuLabels\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"\\u041D\\u043E\\u0432\\u044B\\u0445 - \", tasks.filter(task => task.status == statuses['new']).length), React.createElement(\"label\", {\n      className: \"menuLabels\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"\\u0412 \\u0440\\u0430\\u0431\\u043E\\u0442\\u0435 - \", tasks.filter(task => task.status == statuses['inProgress']).length), React.createElement(\"label\", {\n      className: \"menuLabels\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"\\u0417\\u0430\\u0432\\u0435\\u0440\\u0448\\u0435\\u043D\\u043E - \", tasks.filter(task => task.status == statuses['done']).length)), tasks.map(task => React.createElement(Task, {\n      task: task,\n      key: task.id,\n      editTask: () => this.togglePopupMenu(task),\n      deleteTask: () => this.deleteTask(task),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Menu;","map":{"version":3,"sources":["/Users/DimKa_N7/Documents/work/task1/todo_list/src/components/Menu.js"],"names":["React","PopUp","Task","statuses","new","inProgress","done","priorities","low","avg","high","Menu","Component","constructor","state","tasks","id","desc","status","priority","endDate","factEndDate","popupMenuSeen","editingTask","togglePopupMenu","bind","addTask","editTask","getPopupMenu","deleteTask","setState","task","length","push","index","indexOf","forEach","splice","render","filter","map"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../css/Menu.css';\nimport PopUp from './PopUp';\nimport Task from './Task';\n\nconst statuses = {\n    new: 'Новый',\n    inProgress: 'В работе',\n    done: 'Завершено'\n};\n\nconst priorities = {\n    low: 'Низкий',\n    avg: 'Средний',\n    high: 'Высокий'\n};\n\nclass Menu extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            tasks: [\n                {id: 0, desc: 'task1', status: statuses.new, priority: priorities.low, endDate: '1.1.2019', factEndDate: '-'},\n                {id: 1, desc: 'task2', status: statuses.inProgress, priority: priorities.low, endDate: '1.1.2019', factEndDate: '-'},\n                {id: 2, desc: 'task3', status: statuses.done, priority: priorities.low, endDate: '1.1.2019', factEndDate: '1.1.2019'}\n            ],\n            popupMenuSeen: false,\n            editingTask: {}\n        };\n        this.togglePopupMenu = this.togglePopupMenu.bind(this);\n        this.addTask = this.addTask.bind(this);\n        this.editTask = this.editTask.bind(this);\n        this.getPopupMenu = this.getPopupMenu.bind(this);\n        this.deleteTask = this.deleteTask.bind(this);\n        // this.onLabelStatusClick = this.onLabelStatusClick.bind(this);\n    }\n    \n    togglePopupMenu(editingTask) {\n        this.setState({editingTask: editingTask});\n        this.setState({popupMenuSeen: !this.state.popupMenuSeen});\n    }\n\n    addTask(task) {\n        let { tasks } = this.state;\n        task.id = tasks.length !== 0 ? tasks.length : 0;\n        task.factEndDate = '-';\n        tasks.push(task);\n        this.setState({tasks: tasks});\n    }\n\n    editTask(task) {\n        let {tasks} = this.state;\n        tasks[task.id] = task;\n        this.setState({tasks: tasks});\n    }\n\n    deleteTask(task) {\n        let {tasks} = this.state;\n        const index = tasks.indexOf(task);\n        tasks.forEach(task => {\n            if (task.id > index) {\n                task.id = task.id - 1;\n            }\n        });\n        tasks.splice(index, 1);\n        this.setState(tasks);\n    }\n\n    getPopupMenu() {\n        let {editingTask} = this.state;\n        if (editingTask == null) {\n            return <PopUp toggle={this.togglePopupMenu} task={null} addTask={this.addTask}></PopUp>;\n        }\n        else {\n            return <PopUp toggle={this.togglePopupMenu} task={editingTask} editTask={this.editTask}></PopUp>;\n        }\n    }\n\n    // onLabelStatusClick(event) {\n    //     let {tasks} = this.state;\n    //     let newTasks = tasks.filter(task => task.status == statuses.new);\n    //     let inProgressTasks = tasks.filter(task => task.status == statuses.inProgress);\n    //     let doneTasks = tasks.filter(task => task.status == statuses.done);\n    //     switch(event.target.value) {\n    //         case statuses.new:\n                \n    //             break;\n    //     }\n    // }\n\n    render() {\n        const { tasks } = this.state;\n        return (\n            <div>\n                <div id='menu'>\n                    <button id='buttonAddTask' onClick={() => this.togglePopupMenu(null)}>Добавить задачу</button>\n                    {this.state.popupMenuSeen ? this.getPopupMenu() : null}\n                    <input id='inputSerch' type='text' placeholder='Поиск'></input>\n                    <label className='menuLabels'>Всего - {tasks.length}</label>\n                    <label className='menuLabels'>Новых - {tasks.filter(task => task.status == statuses['new']).length}</label>\n                    <label className='menuLabels'>В работе - {tasks.filter(task => task.status == statuses['inProgress']).length}</label>\n                    <label className='menuLabels'>Завершено - {tasks.filter(task => task.status == statuses['done']).length}</label>\n                </div>\n                {tasks.map(task => \n                    <Task task={task} key={task.id} \n                        editTask={() => this.togglePopupMenu(task)} \n                        deleteTask={() => this.deleteTask(task)}></Task>)}\n            </div>\n        );\n\n    }\n}\n\nexport default Menu;"]},"metadata":{},"sourceType":"module"}